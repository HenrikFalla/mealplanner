// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Tip: Interested in query caching in just a few lines of code? Try Accelerate today! https://pris.ly/tip-3-accelerate

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  role    Role     @default(USER)
  profile Profile?
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}

model Recipe {
  id          Int          @id @default(autoincrement())
  title       String       @unique
  description String?
  steps       RecipeStep[]

  IngerdientList IngerdientList[]
}

model IngerdientList {
  id          Int          @id @default(autoincrement())
  recipe      Recipe       @relation(fields: [recipeId], references: [id])
  recipeId    Int
  name        String
  ingredients Ingredient[]
}

model RecipeStep {
  id          Int    @id @default(autoincrement())
  recipe      Recipe @relation(fields: [recipeId], references: [id])
  recipeId    Int
  description String
  stepOrder   Int
}

model Ingredient {
  id   Int     @id @default(autoincrement())
  name String  @unique
  unit Units[]

  IngerdientList   IngerdientList? @relation(fields: [ingerdientListId], references: [id])
  ingerdientListId Int?
}

model Units {
  id           Int         @id @default(autoincrement())
  name         String      @unique
  Ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])
  ingredientId Int?
}

enum Role {
  USER
  EDITOR
  ADMIN
}
