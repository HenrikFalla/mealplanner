// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Tip: Interested in query caching in just a few lines of code? Try Accelerate today! https://pris.ly/tip-3-accelerate

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Recipe {
  id             Int              @id @default(autoincrement())
  title          String           @unique
  image          String?
  description    String?
  steps          RecipeStep[]
  slug           String
  IngredientList IngredientList[]
  Genre          Genre?           @relation(fields: [genreId], references: [id])
  genreId        Int?
}

model IngredientList {
  id               Int                @id @default(autoincrement())
  recipe           Recipe             @relation(fields: [recipeId], references: [id])
  recipeId         Int
  name             String
  amount           Int
  IngredientInList IngredientInList[]
}

model IngredientInList {
  id               Int             @id @default(autoincrement())
  name             String
  amount           Int
  unit             String
  IngredientList   IngredientList? @relation(fields: [ingredientListId], references: [id])
  ingredientListId Int?
}

model RecipeStep {
  id          Int    @id @default(autoincrement())
  recipe      Recipe @relation(fields: [recipeId], references: [id])
  recipeId    Int
  description String
  stepOrder   Int
}

model Genre {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  Recipes Recipe[]
}

model IngredientGenre {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  Ingredient Ingredient[]
}

model Ingredient {
  id                Int              @id @default(autoincrement())
  name              String           @unique
  IngredientGenre   IngredientGenre? @relation(fields: [ingredientGenreId], references: [id])
  ingredientGenreId Int?
}

model Units {
  id   Int    @id @default(autoincrement())
  name String @unique
}

enum Role {
  USER
  EDITOR
  ADMIN
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  role          Role      @default(USER)
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Profile       Profile?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
